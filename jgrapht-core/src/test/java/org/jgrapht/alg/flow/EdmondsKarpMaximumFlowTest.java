/* ==========================================
 * JGraphT : a free Java graph-theory library
 * ==========================================
 *
 * Project Info:  http://jgrapht.sourceforge.net/
 * Project Creator:  Barak Naveh (http://sourceforge.net/users/barak_naveh)
 *
 * (C) Copyright 2003-2008, by Barak Naveh and Contributors.
 *
 * This program and the accompanying materials are dual-licensed under
 * either
 *
 * (a) the terms of the GNU Lesser General Public License version 2.1
 * as published by the Free Software Foundation, or (at your option) any
 * later version.
 *
 * or (per the licensee's choosing)
 *
 * (b) the terms of the Eclipse Public License v1.0 as published by
 * the Eclipse Foundation.
 */
/* -----------------
 * EdmondsKarpMaximumFlowTest.java
 * -----------------
 * (C) Copyright 2008-2008, by Ilya Razenshteyn and Contributors.
 *
 * Original Author:  Ilya Razenshteyn
 * Contributor(s):   -
 *
 * $Id$
 *
 * Changes
 * -------
 */
package org.jgrapht.alg.flow;

import org.jgrapht.DirectedGraph;
import org.jgrapht.Graphs;
import org.jgrapht.alg.interfaces.MaximumFlowAlgorithm;
import org.jgrapht.graph.DefaultWeightedEdge;
import org.jgrapht.graph.DirectedWeightedMultigraph;
import org.jgrapht.graph.SimpleWeightedGraph;

import java.util.Map;


public class EdmondsKarpMaximumFlowTest extends MaximumFlowAlgorithmTestBase
{
    @Override
    MaximumFlowAlgorithm<Integer, DefaultWeightedEdge> createSolver(DirectedGraph<Integer, DefaultWeightedEdge> network) {
        return new EdmondsKarpMaximumFlow<>(network);
    }

    //~ Methods ----------------------------------------------------------------


//    public void testUndirectedGraph2(){
//        SimpleWeightedGraph<Integer, DefaultWeightedEdge> graph=new SimpleWeightedGraph<>(DefaultWeightedEdge.class);
//        int[][] edges={{5,4,20},{5,1,58},{5,3,39},{4,2,57},{3,2,25},{4,3,13},{2,1,21}};
//        for(int[] edge : edges) //Format: {u,v,weight}
//            Graphs.addEdgeWithVertices(graph, edge[0], edge[1], edge[2]);
//
//        EdmondsKarpMaximumFlow<Integer, DefaultWeightedEdge> maxFlowAlgorithm=new EdmondsKarpMaximumFlow<>(graph);
//        MaximumFlowAlgorithm.MaximumFlow<DefaultWeightedEdge> maxFlow=maxFlowAlgorithm.buildMaximumFlow(1, 4);
//        //Verify that the maximum flow value
//        assertEquals(
//                79,
//                maxFlow.getValue(),
//                EdmondsKarpMaximumFlow.DEFAULT_EPSILON);
//        //Verify that the flow on every arc is between [-DEFAULT_EPSILON, edge_capacity]
//        assertTrue(!maxFlow.getFlow().isEmpty());
//        for (DefaultWeightedEdge e : maxFlow.getFlow().keySet()) {
//            assertTrue(graph.containsEdge(e));
//            assertTrue(maxFlow.getFlow().get(e) >= -EdmondsKarpMaximumFlow.DEFAULT_EPSILON);
//            assertTrue(maxFlow.getFlow().get(e)<= (graph.getEdgeWeight(e)+ EdmondsKarpMaximumFlow.DEFAULT_EPSILON));
//        }
//        System.out.println("Computed flow for undirected graph small");
//    }

//    public void testUndirectedGraph2(){
//        SimpleWeightedGraph<Integer, DefaultWeightedEdge> graph=new SimpleWeightedGraph<>(DefaultWeightedEdge.class);
//        int[][] edges={{4,1,20},{3,2,58},{5,4,39},{1,2,57},{3,7,25},{6,4,13},{2,5,51},{5,7,21},{2,7,29},{6,7,14},{3,4,37},{7,1,37}};
//        for(int[] edge : edges) //Format: {u,v,weight}
//            Graphs.addEdgeWithVertices(graph, edge[0], edge[1], edge[2]);
//
//        EdmondsKarpMaximumFlow<Integer, DefaultWeightedEdge> maxFlowAlgorithm=new EdmondsKarpMaximumFlow<>(graph);
//        MaximumFlowAlgorithm.MaximumFlow<DefaultWeightedEdge> maxFlow=maxFlowAlgorithm.buildMaximumFlow(1, 6);
//        //Verify that the maximum flow value
//        assertEquals(
//                27,
//                maxFlow.getValue(),
//                EdmondsKarpMaximumFlow.DEFAULT_EPSILON);
//        //Verify that the flow on every arc is between [-DEFAULT_EPSILON, edge_capacity]
//        assertTrue(!maxFlow.getFlow().isEmpty());
//        for (DefaultWeightedEdge e : maxFlow.getFlow().keySet()) {
//            assertTrue(graph.containsEdge(e));
//            assertTrue(maxFlow.getFlow().get(e) >= -EdmondsKarpMaximumFlow.DEFAULT_EPSILON);
//            assertTrue(maxFlow.getFlow().get(e)<= (graph.getEdgeWeight(e)+ EdmondsKarpMaximumFlow.DEFAULT_EPSILON));
//        }
//        System.out.println("Computed flow for undirected graph small");
//    }

    public void testUndirectedGraph3(){
        SimpleWeightedGraph<Integer, DefaultWeightedEdge> graph=new SimpleWeightedGraph<>(DefaultWeightedEdge.class);
        int[][] edges={{100,23,20},{96,70,58},{79,97,39},{24,22,57},{11,64,25},{64,96,13},{87,62,51},{23,15,21},{12,37,29},{68,81,14},{54,59,37},{75,29,37},{3,24,33},{92,43,22},{37,23,55},{31,43,54},{37,53,44},{3,79,35},{50,63,51},{1,95,30},{11,12,53},{8,100,48},{9,92,34},{10,89,57},{45,47,12},{85,39,20},{54,41,13},{89,87,42},{44,46,52},{67,99,33},{40,87,55},{19,50,55},{40,73,47},{4,92,47},{99,46,12},{87,17,22},{90,82,35},{66,97,13},{78,75,48},{43,90,45},{10,25,20},{74,24,35},{6,77,15},{13,39,40},{6,13,58},{70,34,51},{76,42,34},{99,50,46},{53,38,22},{21,13,22},{75,33,29},{63,74,37},{56,51,26},{51,99,56},{23,66,17},{99,87,26},{16,99,18},{74,85,47},{82,15,53},{90,94,57},{85,65,47},{26,55,48},{27,3,15},{52,19,18},{84,89,18},{16,57,27},{29,32,11},{29,37,28},{93,86,18},{94,45,28},{60,31,48},{74,98,32},{9,3,17},{31,32,11},{22,25,36},{17,60,40},{5,99,57},{98,8,22},{73,33,45},{69,33,30},{42,70,27},{85,70,33},{5,63,27},{4,8,29},{44,45,15},{12,5,12},{83,87,49},{4,2,53},{17,89,11},{83,37,51},{82,64,33},{41,50,40},{84,16,28},{9,10,24},{12,6,26},{14,100,33},{25,8,17},{79,85,32},{52,39,15},{63,8,31},{55,43,46},{21,79,25},{80,91,29},{89,53,13},{23,9,27},{95,57,27},{4,29,41},{93,39,57},{62,54,48},{85,86,23},{85,1,40},{17,55,35},{35,43,58},{79,93,31},{97,80,57},{90,87,17},{68,88,46},{22,30,51},{42,82,50},{49,51,11},{74,44,31},{87,14,44},{86,71,40},{23,55,25},{85,60,46},{28,37,14},{97,54,44},{7,53,22},{87,58,52},{44,62,10},{57,11,38},{99,28,13},{7,64,59},{31,84,55},{36,91,51},{22,88,20},{84,39,35},{23,70,22},{85,76,54},{18,84,19},{41,7,27},{99,73,21},{66,79,31},{22,31,33},{44,5,37},{95,14,38},{92,95,26},{37,14,31},{74,68,45},{4,24,51},{45,81,46},{100,47,53},{100,59,23},{8,52,17},{24,94,18},{70,71,38},{83,85,26},{59,83,18},{83,14,50},{76,72,35},{65,82,15},{99,9,55},{30,55,18},{73,21,39},{96,100,25},{88,85,35},{11,35,43},{45,3,50},{93,77,51},{98,42,16},{25,34,58},{14,73,42},{71,59,38},{33,94,51},{51,87,27},{42,85,39},{18,3,49},{44,28,51},{11,84,12},{81,93,41},{7,29,37},{18,42,41},{19,98,38},{35,26,11},{6,96,44},{96,40,23},{67,50,49},{30,69,22},{14,97,20},{43,48,33},{40,79,32},{86,89,25},{31,44,23},{94,8,51},{89,1,13},{50,57,12},{38,94,40},{7,97,44},{33,96,44},{59,98,38},{62,100,25},{77,15,42},{79,7,29},{28,35,58},{95,25,48},{76,91,50},{99,76,20},{28,51,26},{84,98,33},{4,15,22},{88,44,14},{83,79,54},{49,45,22},{3,93,38},{81,43,49},{77,48,32},{38,68,19},{11,56,34},{6,28,35},{34,72,50},{94,16,53},{62,55,20},{5,50,27},{42,92,10},{2,1,42},{46,96,32},{15,12,30},{57,6,53},{84,79,24},{49,75,12},{90,9,10},{15,84,36},{32,58,12},{57,94,55},{26,77,15},{6,35,23},{48,37,53},{15,56,58},{45,74,37},{10,8,30},{88,15,56},{97,67,12},{83,98,45},{93,45,36},{25,81,29},{73,51,53},{24,43,32},{26,53,17},{84,59,10},{97,18,45},{32,26,54},{61,30,26},{24,45,54},{88,25,58},{50,54,29},{62,40,48},{95,23,38},{95,63,45},{63,59,56},{99,10,36},{25,84,57},{92,29,34},{58,14,34},{79,12,49},{1,70,53},{35,79,13},{91,83,33},{45,26,52},{72,78,46},{52,92,34},{28,25,15},{22,46,54},{47,8,55},{26,52,56},{50,34,31},{41,99,17},{2,52,44},{84,10,47},{77,20,37},{22,78,44},{81,67,39},{67,56,42},{34,95,10},{14,39,18},{63,86,15},{88,35,12},{3,7,21},{14,55,40},{25,18,46},{81,19,48},{45,98,29},{18,38,11},{59,55,36},{75,85,52},{86,95,45},{50,53,24},{82,7,27},{30,87,26},{2,51,33},{11,40,22},{5,64,25},{72,15,22},{94,25,18},{61,10,51},{39,2,11},{86,51,46},{56,6,22},{15,16,13},{11,27,13},{58,54,28},{86,62,30},{88,52,48},{48,63,59},{89,96,28},{50,33,21},{36,23,20},{83,77,39},{70,68,17},{60,10,46},{20,68,25},{30,81,27},{10,23,35},{9,40,55},{44,23,46},{92,17,46},{98,91,34},{64,72,31},{47,94,45},{56,43,20},{39,54,11},{10,26,50},{62,80,34},{7,19,37},{98,46,30},{20,23,23},{1,97,37},{12,95,27},{40,60,36},{12,29,12},{67,48,44},{67,31,28},{11,85,39},{95,66,33},{97,100,28},{18,12,31},{84,95,51},{70,88,40},{17,84,46},{97,81,14},{91,73,53},{61,8,32},{46,56,16},{81,71,58},{15,39,27},{24,96,17},{82,16,44},{20,45,59},{96,45,22},{11,93,22},{13,64,37},{88,38,53},{3,51,48},{81,16,22},{7,40,19},{33,13,30},{18,28,36},{86,65,40},{52,14,53},{21,67,14},{99,96,29},{78,80,58},{2,99,57},{77,78,42},{12,65,36},{51,98,58},{48,73,59},{36,28,16},{57,67,36},{21,9,24},{15,73,26},{26,54,30},{90,65,33},{29,100,56},{11,79,38},{95,61,31},{64,19,15},{66,64,21},{92,19,22},{70,5,16},{36,33,58},{71,48,21},{46,89,25},{79,48,46},{70,86,22},{89,77,39},{42,78,47},{99,15,48},{88,36,21},{88,93,50},{49,77,10},{76,62,13},{15,67,32},{52,3,57},{10,6,49},{99,81,37},{22,27,15},{61,74,27},{45,86,37},{57,10,59},{91,8,38},{80,48,28},{100,99,59},{27,83,59},{3,54,50},{67,66,32},{47,9,31},{39,68,37},{63,75,21},{46,35,11},{25,2,41},{72,80,11},{20,48,43},{39,96,21},{50,76,37},{35,17,32},{10,77,51},{50,22,14},{8,99,18},{93,50,13},{23,12,49},{84,42,38},{69,1,16},{17,90,17},{27,62,35},{94,72,33},{33,67,45},{15,43,12},{99,31,16},{7,67,13},{91,9,30},{16,24,42},{88,37,41},{5,29,39},{86,49,20},{36,37,49},{93,37,26},{89,94,14},{53,28,25},{34,30,59},{7,42,34},{59,27,40},{61,64,27},{49,66,52},{35,60,23},{47,85,22},{34,42,32},{4,10,49},{51,66,39},{36,61,32},{9,11,56},{91,86,17},{53,45,20},{71,53,38},{75,61,44},{85,82,55},{97,96,39},{52,44,30},{6,14,27},{31,89,50},{93,25,41},{52,95,34},{60,27,56},{34,82,17},{10,20,17},{17,6,12},{54,5,43},{74,88,24},{91,96,17},{10,58,17},{62,95,35},{91,58,18},{30,67,46},{53,91,23},{62,47,30},{30,39,24},{39,65,11},{86,11,16},{41,72,27},{78,49,36},{14,92,40},{65,99,17},{15,59,11},{44,98,40},{50,18,35},{46,21,14},{11,7,39},{50,44,54},{1,46,32},{45,4,12},{21,82,15},{5,4,49},{31,74,29},{87,24,13},{72,68,30},{45,33,31},{25,91,35},{12,66,29},{2,68,40},{3,19,24},{5,22,24},{24,10,48},{72,63,56},{99,13,43},{67,9,47},{64,100,52},{57,60,16},{71,84,29},{82,97,20},{62,15,30},{73,41,17},{2,17,16},{99,85,35},{5,42,33},{3,58,37},{70,8,38},{71,24,49},{10,51,27},{85,55,11},{68,100,15},{41,3,49},{30,92,54},{39,81,53},{86,83,56},{18,78,18},{27,71,43},{10,12,14},{7,90,17},{8,45,55},{10,54,41},{32,76,47},{7,32,41},{3,16,21},{5,52,14},{4,93,41},{60,37,39},{75,80,50},{88,57,35},{80,17,20},{67,8,24},{18,92,46},{66,75,55},{56,17,14},{36,19,28},{38,61,50},{19,84,57},{17,51,32},{81,84,53},{80,56,14},{42,58,54},{26,99,55},{9,29,34},{58,2,24},{24,8,25},{21,52,48},{93,83,48},{16,59,55},{67,88,16},{1,12,54},{90,80,22},{57,78,32},{58,71,18},{81,91,19},{2,11,15},{73,96,11},{70,2,27},{1,52,47},{37,70,20},{76,80,27},{50,1,43},{14,71,10},{7,80,43},{97,12,26},{58,26,44},{8,75,43},{65,33,41},{77,3,20},{86,17,29},{99,55,13},{92,32,35},{12,91,16},{82,55,25},{41,6,28},{62,84,22},{6,70,40},{79,72,37},{90,12,53},{76,92,13},{94,99,29},{48,7,51},{90,68,25},{46,91,18},{20,32,24},{13,98,18},{10,86,38},{78,64,38},{24,47,31},{55,56,53},{87,88,16},{88,27,20},{89,3,37},{72,67,43},{34,15,16},{6,2,10},{92,57,56},{55,72,23},{9,70,35},{83,74,22},{67,98,46},{20,37,14},{46,76,46},{93,10,46},{7,49,11},{25,11,49},{18,62,43},{5,88,13},{88,58,30},{62,6,25},{29,93,19},{88,43,41},{35,97,27},{2,74,46},{28,98,46},{7,15,28},{74,67,29},{38,10,56},{11,18,26},{16,34,18},{8,19,23},{43,83,47},{86,72,59},{19,73,23},{42,80,45},{41,5,39},{71,8,33},{87,65,43},{72,24,12},{2,57,42},{9,83,28},{84,29,32},{83,48,43},{60,14,16},{79,38,25},{74,77,30},{80,40,10},{78,51,45},{86,3,10},{73,27,42},{89,43,44},{97,49,29},{82,67,28},{14,34,12},{60,94,40},{48,97,33},{50,21,16},{87,50,52},{2,14,41},{38,17,48},{27,82,28},{58,41,45},{45,55,26},{5,26,18},{71,94,55},{1,17,11},{54,91,39},{43,70,21},{34,52,27},{18,47,44},{30,89,41},{100,15,30},{70,79,27},{100,48,36},{86,87,41},{75,77,41},{33,32,25},{64,31,49},{95,83,26},{50,82,39},{55,33,10},{24,15,55},{25,69,34},{68,3,31},{53,41,54},{70,48,26},{62,46,58},{63,32,38},{12,49,13},{55,91,12},{9,50,55},{78,55,57},{46,23,30},{52,75,27},{34,22,42},{11,4,17},{20,57,18},{64,95,19},{100,4,17},{56,16,14},{44,94,16},{94,86,35},{7,8,26},{80,2,36},{88,49,21},{37,32,25},{33,20,25},{85,90,46},{55,36,39},{35,53,46},{60,49,19},{7,66,43},{56,76,18},{47,46,13},{54,64,37},{74,6,44},{76,67,47},{64,56,55},{35,16,14},{19,6,55},{52,57,10},{30,90,19},{73,75,40},{17,43,18},{58,56,16},{73,80,17},{95,26,23},{79,2,24},{42,13,49},{30,43,46},{59,30,26},{67,78,20},{55,65,56},{99,82,19},{50,47,37},{14,75,21},{21,27,50},{80,98,14},{26,47,23},{44,99,16},{47,6,16},{89,6,21},{38,72,31},{70,95,16},{8,84,36},{33,30,23},{18,9,53},{61,19,16},{21,35,54},{16,7,35},{64,12,47},{57,56,36},{80,69,26},{14,26,45},{68,65,56},{97,37,48},{16,47,54},{61,72,13},{94,63,38},{92,2,17},{76,48,53},{97,11,37},{37,73,36},{87,60,31},{44,48,58},{97,28,50},{87,11,11},{6,94,13},{3,1,23},{47,83,58},{52,18,31},{18,88,15},{62,45,42},{12,75,43},{96,56,41},{88,40,37},{30,76,47},{62,51,26},{94,58,30},{96,71,28},{25,85,51},{8,48,57},{16,100,43},{83,1,24},{87,82,19},{51,92,42},{57,34,41},{25,35,56},{25,66,21},{45,97,56},{88,79,56},{70,30,43},{90,15,40},{57,93,16},{42,90,55},{64,68,22},{10,96,42},{46,24,21},{54,1,57},{35,85,28},{8,53,17},{6,90,17},{52,48,49},{96,90,53},{11,43,32},{54,98,12},{31,10,23},{29,98,32},{64,22,27},{32,79,27},{29,94,52},{10,27,24},{30,45,26},{39,69,56},{63,15,31},{21,83,16},{86,77,12},{85,66,17},{42,37,51},{83,24,27},{91,31,11},{1,29,50},{46,3,51},{68,56,19},{88,100,41},{11,80,38},{2,44,21},{42,53,59},{37,64,48},{70,76,14},{82,11,38},{79,23,19},{34,73,42},{57,70,16},{57,13,41},{48,18,39},{50,25,29},{88,6,55},{83,25,21},{75,55,14},{12,93,59},{40,65,35},{89,63,19},{27,78,56},{63,88,18},{69,10,32},{79,29,43},{17,24,15},{44,16,46},{2,8,31},{73,26,50},{25,37,52},{54,87,12},{33,6,16},{67,41,36},{72,6,29},{67,95,55},{35,98,45},{49,34,52},{63,18,18},{70,4,13},{17,8,17},{53,36,45},{37,100,50},{74,81,49},{38,39,51},{28,76,54},{93,75,59},{18,81,59},{3,53,40},{23,87,33},{75,27,40},{7,99,32},{48,69,33},{65,25,41},{31,69,33},{96,50,39},{40,70,26},{93,22,10},{20,2,59},{67,19,28},{84,73,59},{33,2,13},{71,62,40},{70,11,49},{50,27,32},{98,56,14},{45,57,11},{45,90,16},{9,65,46},{64,39,10},{41,55,35},{8,33,57},{18,2,47},{14,85,35},{77,41,32},{20,27,21},{65,13,29},{84,23,30},{5,20,20},{73,90,15},{10,92,53},{46,13,48},{91,3,24},{98,30,27},{89,49,22},{74,3,12},{30,42,32},{5,23,39},{9,96,32},{77,90,48},{21,57,48},{34,24,18},{73,36,18},{68,57,44},{13,72,26},{6,80,18},{22,84,56},{49,30,56},{79,37,42},{61,62,39},{58,36,41},{79,30,32},{46,32,18},{26,81,57},{28,19,48},{20,76,50},{18,20,44},{41,20,31},{64,53,48},{85,97,58},{83,60,32},{13,32,12},{84,47,12},{2,24,58},{80,4,10},{73,47,31},{47,51,33},{77,85,17},{37,43,53},{96,77,23},{84,3,56},{53,98,35},{28,66,40},{16,11,19},{6,7,32},{84,33,35},{91,43,59},{91,42,52},{3,82,24},{12,55,47},{75,65,45},{55,92,37},{96,78,15},{62,3,26},{81,5,25},{70,75,39},{17,13,49},{17,91,37},{28,91,10},{89,23,43},{28,75,37},{35,19,23},{2,35,45},{48,82,51},{19,53,34},{56,75,12},{55,1,25},{15,64,56},{53,4,27},{43,82,54},{76,45,52},{37,55,15},{59,5,11},{48,25,34},{62,72,46},{61,5,53},{4,91,55},{46,45,52},{40,100,31},{98,16,21},{31,34,50},{42,12,14},{86,81,12},{14,13,14},{24,13,46},{43,47,14},{32,4,21},{20,87,53},{1,44,37},{25,97,57},{94,66,23},{35,99,36}};
        for(int[] edge : edges) //Format: {u,v,weight}
            Graphs.addEdgeWithVertices(graph, edge[0], edge[1], edge[2]);

        EdmondsKarpMaximumFlow<Integer, DefaultWeightedEdge> maxFlowAlgorithm=new EdmondsKarpMaximumFlow<>(graph);
        MaximumFlowAlgorithm.MaximumFlow<DefaultWeightedEdge> maxFlow=maxFlowAlgorithm.buildMaximumFlow(1, 99);
        //Verify that the maximum flow value
        assertEquals(
                634,
                maxFlow.getValue(),
                EdmondsKarpMaximumFlow.DEFAULT_EPSILON);
        //Verify that the flow on every arc is between [-DEFAULT_EPSILON, edge_capacity]
        assertTrue(!maxFlow.getFlow().isEmpty());
        for (DefaultWeightedEdge e : maxFlow.getFlow().keySet()) {
            assertTrue(graph.containsEdge(e));
            assertTrue(maxFlow.getFlow().get(e) >= -EdmondsKarpMaximumFlow.DEFAULT_EPSILON);
            assertTrue(maxFlow.getFlow().get(e)<= (graph.getEdgeWeight(e)+ EdmondsKarpMaximumFlow.DEFAULT_EPSILON));
        }
        System.out.println("Computed flow for undirected graph correctly3");
    }

    public void testCornerCases()
    {
        DirectedWeightedMultigraph<Integer, DefaultWeightedEdge> simple =
            new DirectedWeightedMultigraph<>(DefaultWeightedEdge.class);
        simple.addVertex(0);
        simple.addVertex(1);
        DefaultWeightedEdge e = simple.addEdge(0, 1);
        try {
            new EdmondsKarpMaximumFlow<Integer, DefaultWeightedEdge>(null);
            fail();
        } catch (NullPointerException ex) {
        }
        try {
            new EdmondsKarpMaximumFlow<>(
                simple,
                -0.1);
            fail();
        } catch (IllegalArgumentException ex) {
        }
        try {
            simple.setEdgeWeight(e, -1.0);
            new EdmondsKarpMaximumFlow<>(simple);
            fail();
        } catch (IllegalArgumentException ex) {
        }
        try {
            simple.setEdgeWeight(e, 1.0);
            EdmondsKarpMaximumFlow<Integer, DefaultWeightedEdge> solver =
                new EdmondsKarpMaximumFlow<>(
                    simple);
            Map<DefaultWeightedEdge, Double> flow = solver.buildMaximumFlow(0, 1).getFlow();
            flow.put(e, 25.0);
            fail();
        } catch (UnsupportedOperationException ex) {
        }
        try {
            EdmondsKarpMaximumFlow<Integer, DefaultWeightedEdge> solver =
                new EdmondsKarpMaximumFlow<>(
                    simple);
            solver.buildMaximumFlow(2, 0);
            fail();
        } catch (IllegalArgumentException ex) {
        }
        try {
            EdmondsKarpMaximumFlow<Integer, DefaultWeightedEdge> solver =
                    new EdmondsKarpMaximumFlow<>(
                            simple);
            solver.buildMaximumFlow(1, 2);
            fail();
        } catch (IllegalArgumentException ex) {
        }
        try {
            EdmondsKarpMaximumFlow<Integer, DefaultWeightedEdge> solver =
                    new EdmondsKarpMaximumFlow<>(
                            simple);
            solver.buildMaximumFlow(0, 0);
            fail();
        } catch (IllegalArgumentException ex) {
        }
        try {
            EdmondsKarpMaximumFlow<Integer, DefaultWeightedEdge> solver =
                    new EdmondsKarpMaximumFlow<>(
                            simple);
            solver.buildMaximumFlow(null, 0);
            fail();
        } catch (IllegalArgumentException ex) {
        }
        try {
            EdmondsKarpMaximumFlow<Integer, DefaultWeightedEdge> solver =
                    new EdmondsKarpMaximumFlow<>(
                            simple);
            solver.buildMaximumFlow(0, null);
            fail();
        } catch (IllegalArgumentException ex) {
        }
    }
}

// End EdmondsKarpMaximumFlowTest.java
